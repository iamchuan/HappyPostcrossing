library(maps)
library(rgeos)
library(maptools)
library(ggmap)
library(geosphere)
library(plyr)
routes = gcIntermediate(routes_all[,c('from_lng', 'from_lat')], routes_all[,c('to_lng', 'to_lat')],
200, breakAtDateLine = FALSE, addStartEnd = TRUE, sp=TRUE)
fortifiedroutes = fortify.SpatialLinesDataFrame(routes)
View(fortifiedroutes)
urbanareasin <- readShapePoly("Map/ne_10m_urban_areas/ne_10m_urban_areas.shp")
worldmap = map_data ("world")
wrld<-c(geom_polygon(aes(long,lat,group=group), size = 0.1, colour= "#090D2A", fill="#090D2A", alpha=0.8, data=worldmap))
urb <- c(geom_polygon(aes(long, lat, group = group),
size = 0.3,
color = "#ffffff",
fill = "#ffffff",
alpha = 1,
data = urbanareasin))
View(fortifiedroutes)
ggplot() + wrld + urb +
geom_line(aes(long, lat, group=id), alpha = 1, size=0.2, data=fortifiedroutes) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = c(0,0.4),
legend.justification = c(0,1),
legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(colour = NA, fill = NA, size = 10),
legend.text = element_text(colour='white', size = 20)) +
guides(fill = guide_legend(keywidth = 20, keyheight = 20))
ggplot() + wrld + urb +
geom_line(aes(long, lat, group=id, colour="blue"), alpha = 1, size=0.2, data=fortifiedroutes) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = c(0,0.4),
legend.justification = c(0,1),
legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(colour = NA, fill = NA, size = 10),
legend.text = element_text(colour='white', size = 20)) +
guides(fill = guide_legend(keywidth = 20, keyheight = 20))
ggplot() + wrld + urb +
geom_line(aes(long, lat, group=id, colour="blue"), alpha = 0.1, size=0.2, data=fortifiedroutes) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = c(0,0.4),
legend.justification = c(0,1),
legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(colour = NA, fill = NA, size = 10),
legend.text = element_text(colour='white', size = 20)) +
guides(fill = guide_legend(keywidth = 20, keyheight = 20))
ggplot() + wrld + urb +
geom_line(aes(long, lat, group=id, colour="blue"), alpha = 0.1, size=0.2, data=fortifiedroutes) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = c(0,0.4),
legend.justification = c(0,1),
legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(colour = NA, fill = NA, size = 10),
legend.text = element_text(colour='white', size = 20))
str(postcards)
str2int <- function(x){                                              # func() for string to ingeger
as.integer(gsub(",", "", gsub("[[:space:]]+[[:alpha:]]+", "", x)))
}
postcards$DistanceMile <- str2int(postcards$distance)
postcards$TraveDays <- str2int(postcards$travel_time)
ggplot(postcards, aes(x=DistanceMile, y=TraveDays)) + geom_point()
ggplot(postcards %>% filter(TraveDays < 100), aes(x=DistanceMile, y=TraveDays)) + geom_point()
The goal: to connect people across the world through postcards, independent of their location, age, gender, race or beliefs.
<img src="./assets/img/Postcrossing_website.png" height=400px>
header(postcards)
head(postcards)
Scrapying#2: Postcards Exchanged One Day (cont'd)
summarise(postcards$TraveDays)
summary(postcards$TraveDays)
library(ggplot2)
library(Sleuth2)
help(case2002)
case2002
case2002 <- case2002
help(case2002)
str(case2002)
summary(case2002)
plot(case2002[, c(1, 5:7)], col = case2002$LC)
plot(case2002[, c(1, 5:7)], col = 1 - case2002$LC)
barplot(table(case2002$LC))
barplot(table(case2002$FM))
barplot(table(case2002$SS))
barplot(table(case2002$BK))
plot(case2002[, c(1, 5:7)], col = 1 - case2002$LC)
plot(case2002[, c(1, 5:7)], col = case2002$LC)
plot(case2002[, c(1, 5:7)], col = case2002$LC, legend)
plot(case2002[, c(1, 5:7)], col = case2002$LC)
qplot(case2002[, c(1, 5:7)], col = case2002$LC)
plot(case2002[, c(1, 5:7)], col = case2002$LC)
View(case2002)
View(case2002)
help(case2002)
logit.overall = glm(LC ~ .,
family = "binomial",
data = case2002)
summary(logit.overall)
scatter.smooth(logit.overall$fit,
residuals(logit.overall, type = "deviance"),
lpars = list(col = "red"),
xlab = "Fitted Probabilities",
ylab = "Deviance Residual Values",
main = "Residual Plot for\nLogistic Regression of Admission Data")
abline(h = 0, lty = 2)
library(car)
influencePlot(logit.overall)
case2002[47,]
case2002[28,]
exp(logit.overall$coefficients)
confint.default(logit.overall)
exp(confint(logit.overall))
pchisq(logit.overall$deviance, logit.overall$df.residual, ncp = 0, lower.tail = FALSE, log.p = FALSE)
summary(logit.model2)
logit.model2 = glm(LC ~ . - BK, family = "binomial", data = case2002)
summary(logit.model2)
pchisq(logit.model2$deviance, logit.model2$df.residual, ncp = 0, lower.tail = FALSE, log.p = FALSE)
logit.noBK = glm(LC ~ . - BK, family = "binomial", data = case2002)
reduced.deviance = logit.noBK$deviance #Comparing the deviance of the reduced
reduced.df = logit.noBK$df.residual    #model (the one without rank) to...
full.deviance = logit.overall$deviance #...the deviance of the full model (the
full.df = logit.overall$df.residual    #one with the rank terms).
pchisq(reduced.deviance - full.deviance,
reduced.df - full.df,
lower.tail = FALSE)
logit.noBKYR= glm(LC ~ BK + YR, family = "binomial", data = case2002)
pchisq(logit.noBKYR$deviance - logit.overall$deviance,
logit.noBKYR$df.residual - logit.overall$df.residual,
lower.tail = FALSE)
AIC(logit.overall, logit.noBK, logit.noBKYR)
BIC(logit.overall, logit.noBK, logit.noBKYR)
1 - logit.overall$deviance/logit.overall$null.deviance
1 - logit.noBK$deviance/logit.noBK$null.deviance
1 - logit.noBKYR$deviance/logit.noBKYR$null.deviance
newdata = with(case2002, data.frame(YR = mean(YR),
BK = c('Bird', 'NoBird')))
predict(logit.noBKYR, newdata)
newdata = with(case2002, data.frame(YR = mean(YR),
BK = c('Bird', 'NoBird')))
predict(logit.noBKYR, newdata, type = "response")
newdata2 = with(case2002, data.frame(YR = 0,
BK = c('Bird', 'NoBird')))
predict(logit.noBKYR, newdata2, type = "response")
prediction = round(logit.noBKYR$fitted.values)
table(prediction, case2002$LC)
postcard <- readRDS("./postcard.rds")
country <- country %>%
mutate(pcpermem = postcards/members)
Permem <- country %>%
filter(members > 1000) %>%
top_n(10, pcpermem)
Permem$country <-factor(Permem$country,
levels=Permem$country[order(Permem$pcpermem)])
ggplot(Permem, aes(country, pcpermem)) +
geom_bar(fill= rep(c("#3279BA", "#DA2349"),5), stat="identity", colour="white") +
coord_flip() +
xlab("Country (Top10)") + ylab("#Postcards (sent) Per Postcrosser") +
ggtitle("#Postcards(sent) per Postcrosser by Country (2005-2016)") +
theme_bw()
from_icon <- icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet(postcard) %>%
addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
from_icon <- icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
?icons
from_icon <- leaflet::icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- leaflet::icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet(postcard) %>%
addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
library(leaflet)
from_icon <- leaflet::icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- leaflet::icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet::leaflet(postcard) %>%
addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
postcard <- readRDS("./postcard.rds")
setwd("~/Desktop/HappyPostcrossing/")
postcard <- readRDS("./postcard.rds")
setwd("~/Desktop/HappyPostcrossing/WebScrapingProject/")
postcard <- readRDS("./postcard.rds")
country <- readRDS("./country.rds")
from_icon <- leaflet::icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- leaflet::icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet::leaflet(postcard) %>%
addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
from_icon <- leaflet::icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- leaflet::icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet::leaflet(postcard) %>%
# addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
from_icon <- leaflet::icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- leaflet::icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet::leaflet(postcard) %>%
addTiles() %>%
# addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
library(leaflet)
from_icon <- leaflet::icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- leaflet::icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet::leaflet(postcard) %>%
addTiles() %>%
# addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
from_icon <- icons(
iconUrl = "https://static1.postcrossing.com/favicon.ico",
iconWidth = 32, iconHeight = 32)
to_icon <- icons(
iconUrl = "https://cdn4.iconfinder.com/data/icons/social-media-pro-icons/1080/Fancy-01-128.png",
iconWidth = 32, iconHeight = 32)
domain = "https://www.postcrossing.com"
post_popup <- paste0("<a href='",
postcard$card_url,
"'><img src='",
postcard$img_url,
"' width=200px></a><br><a href='",
domain, "/user/",
postcard$from_user,
"'>", postcard$from_user,"</a>",
" sent on ", postcard$from_date,
"<br><a href='",
domain, "/user/",
postcard$to_user,
"'>", postcard$to_user,"</a>",
" received on ", postcard$to_date)
leaflet_crossing <- leaflet(postcard) %>%
addProviderTiles("Thunderforest.Transport") %>%
addMarkers(~from_lng, ~from_lat,
clusterOptions = markerClusterOptions(),
icon = from_icon, popup = post_popup,
group = "From") %>%
addMarkers(~to_lng, ~to_lat,
clusterOptions = markerClusterOptions(),
icon = to_icon, popup = post_popup,
group = "To") %>%
addLayersControl(overlayGroup = c("From", "To"),
options = layersControlOptions(collapsed = FALSE))
leaflet_crossing
?leaflet
library(leaflet)
m = leaflet() %>% addTiles()
m
library(leaflet)
m = leaflet() %>% addTiles()
routes_all <- postcard %>% select(from_lat, from_lng, to_lat, to_lng)
fortify.SpatialLinesDataFrame = function(model, data, ...){
ldply(model@lines, fortify)
}
routes = gcIntermediate(routes_all[,c('from_lng', 'from_lat')],
routes_all[,c('to_lng', 'to_lat')],
200, breakAtDateLine = FALSE, addStartEnd = TRUE, sp=TRUE)
fortifiedroutes = fortify.SpatialLinesDataFrame(routes)
#### merge to form great circles
#### creat the backgroud urbanworld map
urbanareasin <- readShapePoly("../Map/ne_10m_urban_areas/ne_10m_urban_areas.shp")
worldmap <- map_data ("world")
wrld<-c(geom_polygon(aes(long,lat,group=group),
size = 0.1, colour= "#090D2A", fill="#090D2A",
alpha=0.8, data=worldmap))
urb <- c(geom_polygon(aes(long, lat, group = group),
size = 0.3,
color = "#ffffff",
fill = "#ffffff",
alpha = 1,
data = urbanareasin))
ggplot() + wrld + urb +
geom_line(aes(long, lat, group=id, colour="#DA2349"),
alpha = 0.05, size=0.5, data=fortifiedroutes) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none") +
guides(fill = guide_legend(keywidth = 20, keyheight = 20))
ggplot(postcard, aes(distance, travel_time)) +
geom_point(color = ifelse(postcard$from_country == postcard$to_country,
"#3279BA", "#DA2349"),
alpha = ifelse(postcard$from_country == postcard$to_country,
.5, .1)) +
xlab("Travel Distance") + ylab("Travel Time") +
ggtitle("Postcards Travel Distance vs. Travel Time") +
theme_bw()
cor(postcard$distance, postcard$travel_time)
cor(country$postcards + 1), log(country$members + 1))
ggplot(country, aes(x=log(members+1), y=log(postcards+1))) + geom_point() +
xlab("#Postcrosser") + ylab("#Postcard") +
ggtitle("Scatter Plot of Postcrossers and Postcards (2005-2016)")
print(paste("Correlation:", cor(postcard$distance, postcard$travel_time))
)
detach("package:plyr")
?detach
detach(package:plyr)
library(dplyr)
# barchart: postcards by country
PostcardCount <- country %>%
top_n(10, postcards) %>%
mutate(postcards = postcards / 1e6)
PostcardCount$country <-factor(PostcardCount$country,
levels=PostcardCount$country[order(PostcardCount$postcards)])
ggplot(PostcardCount,
aes(country, postcards)) +
geom_bar(fill= rep(c("#3279BA", "#DA2349"),5), stat="identity", colour="white") +
coord_flip() +
xlab("Country (Top10)") + ylab("Nnumber of Postcards(sent), Million ") +
ggtitle("Postcards(sent) by Country (2005-2016)") +
theme_bw()
?gcIntermediate
?readShapePoly
